//  

#include "Project.hpp"
#include "scene_lua.hpp"
using namespace std;

#include "framework/GlErrorCheck.hpp"
#include "framework/MathUtils.hpp"

#include <imgui/imgui.h>

#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/io.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/string_cast.hpp>
using namespace glm;

static bool show_gui = true;
static mat4 mRotations = mat4(vec4(1.0, 0.0, 0.0, 0.0),
                               vec4(0.0, 1.0, 0.0, 0.0),
                               vec4(0.0, 0.0, 1.0, 0.0),
                               vec4(0.0, 0.0, 0.0, 1.0));
static mat4 mTranslations = mat4(vec4(1.0, 0.0, 0.0, 0.0),
                               vec4(0.0, 1.0, 0.0, 0.0),
                               vec4(0.0, 0.0, 1.0, 0.0),
                               vec4(0.0, 0.0, -3.0, 1.0));
const size_t CIRCLE_PTS = 48;

//----------------------------------------------------------------------------------------
// Constructor
Project::Project(const std::string & luaSceneFile)
	: m_luaSceneFile(luaSceneFile),
	  m_positionAttribLocation(0),
	  m_normalAttribLocation(0),
	  m_vao_meshData(0),
	  m_vbo_vertexPositions(0),
	  m_vbo_vertexNormals(0),
	  bfcull(false), ffcull(false), buffer(true), prev_x(0.0), prev_y(0.0)
{
	nCurrentDir = DIR_NONE;
}

//----------------------------------------------------------------------------------------
// Destructor
Project::~Project()
{

}

void Project::resetAll() {
	mRotations = mat4(vec4(1.0, 0.0, 0.0, 0.0),
                               vec4(0.0, 1.0, 0.0, 0.0),
                               vec4(0.0, 0.0, 1.0, 0.0),
                               vec4(0.0, 0.0, 0.0, 1.0));
	mTranslations = mat4(vec4(1.0, 0.0, 0.0, 0.0),
                               vec4(0.0, 1.0, 0.0, 0.0),
                               vec4(0.0, 0.0, 1.0, 0.0),
                               vec4(0.0, 0.0, -3.0, 1.0));
}


//----------------------------------------------------------------------------------------
/*
 * Called once, at program start.
 */
void Project::init()
{
	// Set the background colour.
	glClearColor(0.85, 0.85, 0.85, 1.0);

	createShaderProgram();

	glGenVertexArrays(1, &m_vao_meshData);
	enableVertexShaderInputSlots();

	processLuaSceneFile(m_luaSceneFile);

	// Load and decode all .obj files at once here.  You may add additional .obj files to
	// this list in order to support rendering additional mesh types.  All vertex
	// positions, and normals will be extracted and stored within the MeshConsolidator
	// class.
	unique_ptr<MeshConsolidator> meshConsolidator (new MeshConsolidator{
			getAssetFilePath("cube.obj"),
			getAssetFilePath("sphere.obj"),
			getAssetFilePath("suzanne.obj"),
			getAssetFilePath("cone.obj"),
			getAssetFilePath("cylinder.obj")
	});


	// Acquire the BatchInfoMap from the MeshConsolidator.
	meshConsolidator->getBatchInfoMap(m_batchInfoMap);

	// Take all vertex data within the MeshConsolidator and upload it to VBOs on the GPU.
	uploadVertexDataToVbos(*meshConsolidator);

	mapVboDataToVertexShaderInputLocations();

	initPerspectiveMatrix();

	initViewMatrix();

	initLightSources();

	// Exiting the current scope calls delete automatically on meshConsolidator freeing
	// all vertex data resources.  This is fine since we already copied this data to
	// VBOs on the GPU.  We have no use for storing vertex data on the CPU side beyond
	// this point.
}

//----------------------------------------------------------------------------------------
void Project::processLuaSceneFile(const std::string & filename) {
	// This version of the code treats the Lua file as an Asset,
	// so that you'd launch the program with just the filename
	// of a puppet in the Assets/ directory.
	// std::string assetFilePath = getAssetFilePath(filename.c_str());
	// m_rootNode = std::shared_ptr<SceneNode>(import_lua(assetFilePath));

	// This version of the code treats the main program argument
	// as a straightforward pathname.
	m_rootNode = std::shared_ptr<SceneNode>(import_lua(filename));
	if (!m_rootNode) {
		std::cerr << "Could Not Open " << filename << std::endl;
	}
}

//----------------------------------------------------------------------------------------
void Project::createShaderProgram()
{
	m_shader.generateProgramObject();
	m_shader.attachVertexShader( getAssetFilePath("VertexShader.vs").c_str() );
	m_shader.attachFragmentShader( getAssetFilePath("FragmentShader.fs").c_str() );
	m_shader.link();

}

//----------------------------------------------------------------------------------------
void Project::enableVertexShaderInputSlots()
{
	//-- Enable input slots for m_vao_meshData:
	{
		glBindVertexArray(m_vao_meshData);

		// Enable the vertex shader attribute location for "position" when rendering.
		m_positionAttribLocation = m_shader.getAttribLocation("position");
		glEnableVertexAttribArray(m_positionAttribLocation);

		// Enable the vertex shader attribute location for "normal" when rendering.
		m_normalAttribLocation = m_shader.getAttribLocation("normal");
		glEnableVertexAttribArray(m_normalAttribLocation);

		CHECK_GL_ERRORS;
	}

	// Restore defaults
	glBindVertexArray(0);
}

//----------------------------------------------------------------------------------------
void Project::uploadVertexDataToVbos (
		const MeshConsolidator & meshConsolidator
) {
	// Generate VBO to store all vertex position data
	{
		glGenBuffers(1, &m_vbo_vertexPositions);

		glBindBuffer(GL_ARRAY_BUFFER, m_vbo_vertexPositions);

		glBufferData(GL_ARRAY_BUFFER, meshConsolidator.getNumVertexPositionBytes(),
				meshConsolidator.getVertexPositionDataPtr(), GL_STATIC_DRAW);

		glBindBuffer(GL_ARRAY_BUFFER, 0);
		CHECK_GL_ERRORS;
	}

	// Generate VBO to store all vertex normal data
	{
		glGenBuffers(1, &m_vbo_vertexNormals);

		glBindBuffer(GL_ARRAY_BUFFER, m_vbo_vertexNormals);

		glBufferData(GL_ARRAY_BUFFER, meshConsolidator.getNumVertexNormalBytes(),
				meshConsolidator.getVertexNormalDataPtr(), GL_STATIC_DRAW);

		glBindBuffer(GL_ARRAY_BUFFER, 0);
		CHECK_GL_ERRORS;
	}
}

//----------------------------------------------------------------------------------------
void Project::mapVboDataToVertexShaderInputLocations()
{
	// Bind VAO in order to record the data mapping.
	glBindVertexArray(m_vao_meshData);

	// Tell GL how to map data from the vertex buffer "m_vbo_vertexPositions" into the
	// "position" vertex attribute location for any bound vertex shader program.
	glBindBuffer(GL_ARRAY_BUFFER, m_vbo_vertexPositions);
	glVertexAttribPointer(m_positionAttribLocation, 3, GL_FLOAT, GL_FALSE, 0, nullptr);

	// Tell GL how to map data from the vertex buffer "m_vbo_vertexNormals" into the
	// "normal" vertex attribute location for any bound vertex shader program.
	glBindBuffer(GL_ARRAY_BUFFER, m_vbo_vertexNormals);
	glVertexAttribPointer(m_normalAttribLocation, 3, GL_FLOAT, GL_FALSE, 0, nullptr);

	//-- Unbind target, and restore default values:
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	CHECK_GL_ERRORS;

	//-- Unbind target, and restore default values:
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	CHECK_GL_ERRORS;
}

//----------------------------------------------------------------------------------------
void Project::initPerspectiveMatrix()
{
	float aspect = ((float)m_windowWidth) / m_windowHeight;
	m_perpsective = glm::perspective(degreesToRadians(60.0f), aspect, 0.1f, 100.0f);
}


//----------------------------------------------------------------------------------------
void Project::initViewMatrix() {
	m_view = glm::lookAt(vec3(0.0f, 0.0f, 0.0f), 
			vec3(0.0f, 0.0f, -1.0f),
			vec3(0.0f, 1.0f, 0.0f));
	m_view *= mTranslations;
}

//----------------------------------------------------------------------------------------
void A3::initLightSources() {
	// World-space position
	m_light.position = vec3(0.0f, 1.5f, 2.0f);
	m_light.rgbIntensity = vec3(1.0f); // light
}

//----------------------------------------------------------------------------------------
void A3::uploadCommonSceneUniforms() {
	m_shader.enable();
	{
		//-- Set Perpsective matrix uniform for the scene:
		GLint location = m_shader.getUniformLocation("Perspective");
		glUniformMatrix4fv(location, 1, GL_FALSE, value_ptr(m_perpsective));
		CHECK_GL_ERRORS;

			location = m_shader.getUniformLocation("light.position");
			glUniform3fv(location, 1, value_ptr(m_light.position));
			location = m_shader.getUniformLocation("light.rgbIntensity");
			glUniform3fv(location, 1, value_ptr(m_light.rgbIntensity));
			CHECK_GL_ERRORS;

		//-- Set background light ambient intensity
			location = m_shader.getUniformLocation("ambientIntensity");
			vec3 ambientIntensity(0.05f);
			glUniform3fv(location, 1, value_ptr(ambientIntensity));
			CHECK_GL_ERRORS;
	}
	m_shader.disable();
}

//----------------------------------------------------------------------------------------
/*
 * Called once per frame, before guiLogic().
 */
void A3::appLogic()
{
	// Place per frame, application logic here ...
	uploadCommonSceneUniforms();
}

//----------------------------------------------------------------------------------------
/*
 * Called once per frame, after appLogic(), but before the draw() method.
 */
void Project::guiLogic()
{
	if( !show_gui ) {
		return;
	}

	static bool firstRun(true);
	if (firstRun) {
		ImGui::SetNextWindowPos(ImVec2(50, 50));
		firstRun = false;
	}

	static bool showDebugWindow(true);
	ImGuiWindowFlags windowFlags(ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_MenuBar);
	float opacity(0.5f);
	ImGui::Begin("Menu", &showDebugWindow, ImVec2(100,100), opacity, windowFlags);
	if (ImGui::BeginMenuBar())
	{
		if (ImGui::BeginMenu("Applications"))
		{
			if (ImGui::MenuItem("Reset All", "A")) {
                                resetAll();
                        }
			if (ImGui::MenuItem("Quit", "Q")) {
				glfwSetWindowShouldClose(m_window, GL_TRUE);
                        }
			ImGui::EndMenu();
		}
		if (ImGui::BeginMenu("Options"))
		{
			if (ImGui::Checkbox("Z-Buffer", &buffer)) {
				if (buffer) {
                                	glDepthFunc(GL_LESS);
                        	} else {
                                	glDepthFunc(GL_ALWAYS);
                        	}
			}
                        if (ImGui::Checkbox("Backface Culling", &bfcull)) {
				if (bfcull && ffcull) {
					glCullFace(GL_FRONT_AND_BACK);
				} else if (ffcull) {
					glCullFace(GL_FRONT);
				} else if (bfcull) {
					glCullFace(GL_BACK);
				}
			}
			if (ImGui::Checkbox("Frontface Culling", &ffcull)) {
				if (bfcull && ffcull) {
                                        glCullFace(GL_FRONT_AND_BACK);
                                } else if (ffcull) {
                                        glCullFace(GL_FRONT);
                                } else if (bfcull) {
                                        glCullFace(GL_BACK);
                                }

			}
		    ImGui::EndMenu();
		}
		ImGui::EndMenuBar();
	}
	ImGui::End();
}

//----------------------------------------------------------------------------------------
// Update mesh specific shader uniforms:
void A3::updateShaderUniforms(
		const ShaderProgram & shader,
		const GeometryNode & node,
		const glm::mat4 & viewMatrix
) {
	shader.enable();
		//-- Set ModelView matrix:
		GLint location = shader.getUniformLocation("ModelView");
		mat4 modelView = mat4(viewMatrix);
		glUniformMatrix4fv(location, 1, GL_FALSE, value_ptr(modelView));
		CHECK_GL_ERRORS;
		//-- Set NormMatrix:
		location = shader.getUniformLocation("NormalMatrix");
		mat3 normalMatrix = glm::transpose(glm::inverse(mat3(modelView)));
		glUniformMatrix3fv(location, 1, GL_FALSE, value_ptr(normalMatrix));
		CHECK_GL_ERRORS;


		//-- Set Material values:
		location = shader.getUniformLocation("material.kd");
		vec3 kd = node.material.kd;
		glUniform3fv(location, 1, value_ptr(kd));
		CHECK_GL_ERRORS;
		location = shader.getUniformLocation("material.ks");
		vec3 ks = node.material.ks;
		glUniform3fv(location, 1, value_ptr(ks));
		CHECK_GL_ERRORS;
		location = shader.getUniformLocation("material.shininess");
		glUniform1f(location, node.material.shininess);
		CHECK_GL_ERRORS;
	shader.disable();

}

//----------------------------------------------------------------------------------------
/*
 * Called once per frame, after guiLogic().
 */
void A3::draw() {

	glEnable( GL_DEPTH_TEST );
	if (bfcull || ffcull) {
		glEnable(GL_CULL_FACE);
	}
	renderSceneGraph(*m_rootNode);


	glDisable( GL_DEPTH_TEST );
	glDisable( GL_CULL_FACE);
}

//----------------------------------------------------------------------------------------
void A3::renderSceneGraph(SceneNode & root) {
	glBindVertexArray(m_vao_meshData);
	matStack.push(m_view);
	m_view *= mRotations;
	traverse(root);
	m_view = mat4(matStack.top());
	matStack.pop();

	glBindVertexArray(0);
	CHECK_GL_ERRORS;
}

void A3::traverse(SceneNode & curr) {
	m_view *= curr.get_transform();
	matStack.push(m_view);
	if (curr.m_nodeType == NodeType::GeometryNode) {
		GeometryNode & geometryNode = static_cast<GeometryNode &>(curr);
		updateShaderUniforms(m_shader, geometryNode, m_view);
                BatchInfo batchInfo = m_batchInfoMap[geometryNode.meshId];
                m_shader.enable();
                glDrawArrays(GL_TRIANGLES, batchInfo.startIndex, batchInfo.numIndices);
                m_shader.disable();
	}
	for (SceneNode * child : curr.children) {
		traverse(*child);
	}
	matStack.pop();
	m_view = mat4(matStack.top());
}

//----------------------------------------------------------------------------------------
/*
 * Called once, after program is signaled to terminate.
 */
void Project::cleanup()
{

}

//----------------------------------------------------------------------------------------
/*
 * Event handler.  Handles cursor entering the window area events.
 */
bool Project::cursorEnterWindowEvent (
		int entered
) {
	bool eventHandled(false);

	// Fill in with event handling code...

	return eventHandled;
}

//----------------------------------------------------------------------------------------
/*
 * Event handler.  Handles mouse cursor movement events.
 */
bool Project::mouseMoveEvent (
		double xPos,
		double yPos
) {
	bool eventHandled(false);
	if (!ImGui::IsMouseHoveringAnyWindow()) {
		prev_x = xPos;
		prev_y = yPos;
	}

	return true;
}

//----------------------------------------------------------------------------------------
/*
 * Event handler.  Handles mouse button events.
 */
bool A3::mouseButtonInputEvent (
		int button,
		int actions,
		int mods
) {
	bool eventHandled(false);

	// Fill in with event handling code...
	if (!ImGui::IsMouseHoveringAnyWindow()) {
		if (actions == GLFW_PRESS) {
		}
        }
	if ( currentMode == 1) {
		if (button == GLFW_MOUSE_BUTTON_LEFT && actions == GLFW_PRESS) {
		}
	}
	return true;
}

//----------------------------------------------------------------------------------------
/*
 * Event handler.  Handles mouse scroll wheel events.
 */
bool A3::mouseScrollEvent (
		double xOffSet,
		double yOffSet
) {
	bool eventHandled(false);

	// Fill in with event handling code...
	return eventHandled;
}

//----------------------------------------------------------------------------------------
/*
 * Event handler.  Handles window resize events.
 */
bool A3::windowResizeEvent (
		int width,
		int height
) {
	bool eventHandled(false);
	initPerspectiveMatrix();
	return eventHandled;
}

//----------------------------------------------------------------------------------------
/*
 * Event handler.  Handles key input events.
 */
bool Project::keyInputEvent (
		int key,
		int action,
		int mods
) {
	bool eventHandled(false);

	if( action == GLFW_PRESS ) {
		if( key == GLFW_KEY_M ) {
			show_gui = !show_gui;
			eventHandled = true;
		}
                if( key == GLFW_KEY_A ) {
                        resetAll();
                        eventHandled = true;
                }
                if( key == GLFW_KEY_Q ) {
                        glfwSetWindowShouldClose(m_window, GL_TRUE);
                        eventHandled = true;
                }
                if( key == GLFW_KEY_Z ) {
			buffer = !buffer;
			if (buffer) {
				glDepthFunc(GL_LESS);
			} else {
				glDepthFunc(GL_ALWAYS);
			}
                        eventHandled = true;
                }
                if( key == GLFW_KEY_B ) {
			bfcull = !bfcull;
			if (bfcull && ffcull) {
                                glCullFace(GL_FRONT_AND_BACK);
                        } else if (ffcull) {
                                glCullFace(GL_FRONT);
                        } else if (bfcull) {
				glCullFace(GL_BACK);
			}
                        eventHandled = true;
                }
                if( key == GLFW_KEY_F ) {
			ffcull = !ffcull;
			if (bfcull && ffcull) {
				glCullFace(GL_FRONT_AND_BACK);
                        } else if (bfcull) {
				glCullFace(GL_BACK);
                        } else if (ffcull) {
				glCullFace(GL_FRONT);
			}
                        eventHandled = true;
                }
	}
	// Fill in with event handling code...

	return eventHandled;
}
